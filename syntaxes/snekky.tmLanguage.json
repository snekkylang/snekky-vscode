{
	"name": "Snekky",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
        },
        {
            "include": "#other-keywords"
        },
        {
            "include": "#comments"
        }, 
        {
            "include": "#numbers"
        },
        {
            "include": "#variables"
        },
        {
            "include": "#booleans"
        },
        {
            "include": "#functions"
        },
        {
            "include": "#null-literals"
        },
        {
            "include": "#closures"
        },
        {
            "include": "#calls"
        },
        {
            "include": "#variable-names"
        }
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"name": "keyword.control.snekky",
				"match": "\\b(if|else|return|while|break|for|import)\\b"
			}]
		},
		"strings": {
			"name": "string.quoted.double.snekky",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.snekky",
					"match": "\\\\."
				}
			]
        },
        "other-keywords": {
            "name": "keyword.snekky",
            "match": "\\b(in)\\b"
        },
        "comments": {
            "name": "comment.line.double-slash.snekky",
            "match": "\/\/[^\n\r]*"
        },
        "numbers": {
            "name": "constant.numeric.snekky",
            "match": "[0-9](.[0-9])*"
        },
        "variables": {
            "name":"variable.language.snekky",
            "match": "\\b(mut|let)\\b"
        },
        "booleans": {
            "name":"constant.language.boolean.snekky",
            "match": "\\b(true|false)\\b"
        },
        "functions": {
            "name": "constant.language.function.snekky",
            "match": "\\bfunc\\b"
        },
        "null-literals": {
            "name": "constant.language.class.snekky",
            "match": "\\bnull\\b"
        },
        "calls": {
            "name": "support.function.any-method.snekky",
            "match": "\\w+(?=\\()"
        },
        "closures": {
            "name": "entity.name.class.snekky",
            "match": "([A-Z][a-z]+)*[A-Z][a-z]*"
        },
        "variable-names": {
            "name": "variable.name.snekky",
            "match": "\\b\\w+\\b"
        }
	},
	"scopeName": "source.snek"
}